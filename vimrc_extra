set nocompatible
let mapleader = ";"
let maplocalleader = mapleader
set modelines=5
set bs=2

" one space after period
set nojoinspaces
" Ignore files when completing
set suffixes+=.class,.pyc,.pyo
set suffixes+=.lo,.swo
" Don't ignore headers when completing
set suffixes-=.h

" use blowfish2 if i ask for crypto
set cm=blowfish2
" show line number and character pos
set ruler
set sts=4
" keep 4 lines above and below the cursor
set so=4

set showcmd

" unexplainable but helpful completion settings
set wildmenu wildmode=list,list:longest

" always include status line
set laststatus=2

" don't remember options in seccions
set sessionoptions-=options

" don't let search open a fold
" set fdo-=search

" i have cores for a reason
set makeprg=make\ -j8

filetype plugin indent on
syntax on

" defines a command, MkDirs, that will make all the directories necessary so
" that the path to current buffer-file exists
command MkDirs call mkdir(expand('%:h'), 'p')

command CtagsCpp !ctags --c++-kinds=+p --c-kinds=+p --fields=+iaS --extra=+q -Rnu .

command HighlightCurrentLine :call matchadd('Search', '\%'.line('.').'l')<CR>
command ClearHighlightCurrentLine :call clearmatches()<CR>

" https://vim.fandom.com/wiki/Search_across_multiple_lines
" Search for the ... arguments separated with whitespace (if no '!'),
" or with non-word characters (if '!' added to command).
function! SearchMultiLine(bang, ...)
  if a:0 > 0
    let sep = (a:bang) ? '\_W\+' : '\_s\+'
    let @/ = join(a:000, sep)
  endif
endfunction
command! -bang -nargs=* -complete=tag S call SearchMultiLine(<bang>0, <f-args>)|normal! /<C-R>/<CR>

" The source for these happens in shell.nix
command! ZettelFiles :call ZettelFiles()
command! ZettelNew :call ZettelNew(1)
command! ZettelNewLinkBack :call ZettelNewLinkBack()
command! ZettelFindBackLinks :call ZettelFindLinksTo()
command! ZettelFollowLink :call ZettelFzfRgLinkSource()

" my simple statusline, airline was a steaming pile
set statusline=%q%t\ @\ %P\ [ft=%Y%M%R%W%H]\ char:0x%B\ pos\ %l:%c\ %=%<%{expand('%:~:.:h')}

set tags=./tags,./TAGS,tags,TAGS,./.tags,./.TAGS,.tags,.TAGS,../../tags,../tags
let &tags.=expand(",$TAGS")
" R mode customizations
let R_assign = 2

set grepprg=rg\ --vimgrep\ $*
set grepformat=%f:%l:%c:%m

" functions
function s:camel_word(dir)
    call search('\U\zs\u\|\<', a:dir)
endfunction


" Global mappings {{{
" disable keymapping for Ex mode
nnoremap Q <nop>

" one of my habits is to I<type><CR><type> or whatever and this can introduce
" whitespace errors. let's try this.
nnoremap I<CR> O<Esc>jI

nnoremap <Leader>T :TagbarToggle<CR>

" functions from junegunn-fzf.vim
" each brings up fuzzy completion list
" <Leader>u - list of buffers
nnoremap <Leader>u :Buffers<CR>
" <Leader>f - list of files under the current Git repo
nnoremap <Leader>F :<C-u>GitFiles<CR>
" <Leader>f - list of files under the current directory
nnoremap <Leader>f :<C-u>Files<CR>
" <Leader>f - list of tags
nnoremap <Leader>t :Tags<CR>

" <Leader>d deletes the current buffer
" nnoremap <Leader>d :bd<CR>

" Insert current date into buffer. Used for note taking.
nnoremap <Leader>it "=strftime("%c")<CR>p

" select some text, then type // and it will search for the literal text
vnoremap // y/\V<C-R>"<CR>

" highlight matches in search
" set hlsearch
" <Leader>h will turn off highlights
nnoremap <Leader>h :set hls!<CR>
"nnoremap <Space> zz

" close the current window
nnoremap <Leader>c <C-w>c
" make the current window the only window
nnoremap <Leader>o <C-w>o
" easier movement in splits taking into account dvorak
" nnoremap <C-h> <C-w><C-h>
" nnoremap <C-t> <C-w>k
" nnoremap <C-n> <C-w>j
" nnoremap <C-s> <C-w><C-l>

" C-w ] will open tag in a split
" C-w g } will let you select tag for preview
"nnoremap <C-n> :cnext<CR>
"nnoremap <C-p> :cprevious<CR>
"nnoremap <Leader>n :tnext<CR>
"nnoremap <Leader>p :tprev<CR>

" Put timestamp in filename?
cmap <F3> <C-R>=strftime("%Y%m%d%H%M")<CR>

nnoremap <silent> _ :aboveleft sp<CR>:exe "normal \<Plug>VinegarUp"<CR>
nnoremap <silent> <Bar> :aboveleft vsp<CR>:exe "normal \<Plug>VinegarUp"<CR>
" }}}

" package settings

" package nord-vim {{{
" let g:nord_bold_vertical_split_line = 1
" augroup nord-theme-overrides
"     autocmd!
    " Brighten the vertical split so I don't confuse it with the color column.
    " Even brighter than the bold_vertical_split option.
    " autocmd ColorScheme nord hi VertSplit guibg=#616E88 guifg=#434C5E
    " autocmd ColorScheme nord hi ColorColumn guibg=#2E3440 guifg=#434C5E
" augroup END
" colorscheme nord
" }}}

" package fzf-vim {{{
" :BD function to use fzf to delete buffers
function! s:list_buffers()
    redir => list
    silent ls
    redir END
    return split(list, "\n")
endfunction

function! s:delete_buffers(lines)
    execute 'bwipeout' join(map(a:lines, {_, line -> split(line)[0]}))
endfunction

" Call :BuffersDelete to pop up window of buffers to delete, use tab to
" select a buffer for deletion, enter to delete all
command! BuffersDelete call fzf#run(fzf#wrap({
            \ 'source': s:list_buffers(),
            \ 'sink*': { lines -> s:delete_buffers(lines) },
            \ 'options': '--multi --reverse --bind ctrl-a:select-all+accept'
            \ }))

" https://github.com/junegunn/fzf.vim/issues/556
" remap `gf` to pick up files anywhere inside current directory rather than
" just the literal `<cfile>` when you want the same for some *other*
" directory, you put your cursor on the filename and type `:GF other-dir`
function! GF(...)
    call fzf#run({'dir': a:1, 'source': 'find . -type f', 'options':['-1', '--query', expand('<cfile>')], 'sink': 'e'})
endfunction
command! -nargs=* GF :call GF(<f-args>)

" goto fzf file at cursor
nnoremap gf :call fzf#vim#files('.', {'options':'-1 --query '.expand('<cword>')})<CR>

" search from cwd
nnoremap \ :Rg<CR>
" fzf over lines in current buffer, :Lines for all buffers
nnoremap <Leader>b :BLines<CR>
nnoremap <Leader>B :Lines<CR>
" }}}

" package vimtex {{{
let g:tex_flavor = "latex"
let g:vimtex_disable_recursive_main_file_detection = 1
" }}}

" GUI options {{{
if has('gui')
    set guioptions-=m " no menu
    set guioptions-=T " no toolbar
    set guioptions-=r " no scrollbars
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L
    set guioptions-=b
    set guifont=Iosevka\ Term\ Medium:h13
    " set guifont=SF\ Mono\ Regular:h13
    " set guifont=Source\ Code\ Pro\ Regular:h13
endif
" }}}

" load all the vim packages now, including pathogen
packloadall

" vaporwave plz
colorscheme dracula

" Python indenting {{{
function PythonParenIndent(lnum)
    call cursor(a:lnum, 1)
    let [pline, pcol] = searchpairpos('(\|{\|\[', '', ')\|}\|\]', 'bW',
                        \ "synIDattr(synID(line('.'), col('.'), 1), 'name')" .
                        \ " =~ '\\(Comment\\|String\\)$'",
                        \ max([0,a:lnum-50]))
    let plinecontent = getline(pline)
    let lineend = match(plinecontent, '\s*$')
    if pcol >= lineend
        return &sw
    else
        return pcol-indent(pline)
    endif
endfunction

let g:pyindent_nested_paren='PythonParenIndent(a:lnum)'
let g:pyindent_open_paren='PythonParenIndent(a:lnum)'
" }}}

" z3 specific style settings for c++
autocmd BufRead
     \ ~/work/inprogress/z3/*/{src,tools,tests}/*.{cc,cpp,h,inc}
     \ setlocal makeprg=make\ -C\ .vimbuild\ -j24\ all sw=4 cino=:0,l1,g0,t0,(0,w1,W4

" Trailing whitespace
command StripTrailingWhitespace %s/\s\+$//e

if !has('gui') && stridx($TERM, "kitty")
  " turn off background color erase for kitty
  let &t_ut=''
endif

" Goyo config {{{
let g:goyo_width = 120

function! s:goyo_enter()
    set lbr
endfunction

function! s:goyo_leave()
    set nolbr
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
" }}}


runtime vimrc_local

